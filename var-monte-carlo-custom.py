# app_advanced.py
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import datetime, math
import json
from scipy import stats
from io import BytesIO
from matplotlib.backends.backend_pdf import PdfPages
import seaborn as sns

st.set_page_config(page_title="VaR Monte Carlo Advanced", layout="wide")
st.title("üìä VaR Monte Carlo Avan√ßado - Finhealth")

# Inputs b√°sicos
col1, col2 = st.columns(2)
with col1:
    pl = st.number_input("Patrim√¥nio L√≠quido (R$)", 0.0, value=1_000_000.0, step=1000.0)
    horizonte_dias = st.selectbox("Horizonte (dias)", [1, 5, 10, 21, 63, 126, 252])
    nivel_conf = st.selectbox("N√≠vel de Confian√ßa", ["90%", "95%", "99%", "99.5%"])
    
with col2:
    conf_map = {"90%": 0.90, "95%": 0.95, "99%": 0.99, "99.5%": 0.995}
    alpha = conf_map[nivel_conf]
    n_sims = st.number_input("N¬∫ simula√ß√µes Monte Carlo", 1000, 500000, value=50000, step=1000)
    seed = st.number_input("Seed (reprodutibilidade)", 0, 1000000, value=42, step=1)

# Carteira
st.subheader("üìà Aloca√ß√£o da Carteira")
col1, col2, col3 = st.columns(3)
with col1:
    acoes = st.slider("A√ß√µes %PL", 0, 100, 40)
with col2:
    juros = st.slider("Renda Fixa %PL", 0, 100, 30)
with col3:
    dolar = st.slider("D√≥lar %PL", 0, 100, 20)

total_aloc = acoes + juros + dolar
col1, col2 = st.columns(2)
with col1:
    if total_aloc > 100:
        st.error(f"‚ö†Ô∏è Aloca√ß√£o total: {total_aloc}% (m√°ximo 100%)")
    else:
        st.success(f"‚úÖ Aloca√ß√£o total: {total_aloc}%")
with col2:
    if total_aloc < 100:
        st.info(f"üí∞ Caixa: {100-total_aloc}%")

pesos = np.array([acoes, juros, dolar])/100

# CONFIGURA√á√ïES AVAN√áADAS
st.subheader("‚öôÔ∏è Configura√ß√µes Avan√ßadas do Modelo")

tab1, tab2, tab3, tab4 = st.tabs(["üìä Volatilidades", "üîó Correla√ß√µes", "üìà Distribui√ß√µes", "üéØ Cen√°rios Stress"])

with tab1:
    st.write("### Volatilidades Anualizadas (%)")
    col1, col2, col3 = st.columns(3)
    with col1:
        vol_acoes = st.number_input("Volatilidade A√ß√µes", 5.0, 100.0, 25.0, 0.5, format="%.1f")
    with col2:
        vol_juros = st.number_input("Volatilidade Renda Fixa", 1.0, 50.0, 8.0, 0.5, format="%.1f")
    with col3:
        vol_dolar = st.number_input("Volatilidade D√≥lar", 5.0, 50.0, 15.0, 0.5, format="%.1f")
    
    vols = np.array([vol_acoes, vol_juros, vol_dolar]) / 100
    
    # Mostrar volatilidades ajustadas pelo horizonte
    vols_horizonte = vols * np.sqrt(horizonte_dias/252)
    st.info(f"üìè Volatilidades para {horizonte_dias} dias: A√ß√µes={vols_horizonte[0]*100:.1f}%, RF={vols_horizonte[1]*100:.1f}%, D√≥lar={vols_horizonte[2]*100:.1f}%")

with tab2:
    st.write("### Matriz de Correla√ß√£o")
    
    # Op√ß√£o de usar correla√ß√µes
    usar_correlacao = st.checkbox("Usar correla√ß√µes entre ativos", value=True)
    
    if usar_correlacao:
        # Templates de correla√ß√£o
        template_corr = st.selectbox(
            "Usar template de correla√ß√£o:",
            ["Personalizado", "Mercado Normal", "Crise (Flight to Quality)", "Risk-On", "Decorrela√ß√£o"]
        )
        
        templates_corr = {
            "Mercado Normal": {
                "acoes_rf": -0.20, "acoes_dolar": 0.30, "rf_dolar": -0.40
            },
            "Crise (Flight to Quality)": {
                "acoes_rf": 0.40, "acoes_dolar": 0.60, "rf_dolar": -0.20
            },
            "Risk-On": {
                "acoes_rf": -0.50, "acoes_dolar": -0.40, "rf_dolar": 0.30
            },
            "Decorrela√ß√£o": {
                "acoes_rf": 0.0, "acoes_dolar": 0.0, "rf_dolar": 0.0
            },
            "Personalizado": {
                "acoes_rf": -0.20, "acoes_dolar": 0.30, "rf_dolar": -0.40
            }
        }
        
        selected_template = templates_corr[template_corr]
        
        # Inputs de correla√ß√£o
        col1, col2, col3 = st.columns(3)
        with col1:
            corr_acoes_rf = st.slider("Correla√ß√£o A√ß√µes-RF", -1.0, 1.0, 
                                      selected_template["acoes_rf"], 0.05)
        with col2:
            corr_acoes_dolar = st.slider("Correla√ß√£o A√ß√µes-D√≥lar", -1.0, 1.0, 
                                         selected_template["acoes_dolar"], 0.05)
        with col3:
            corr_rf_dolar = st.slider("Correla√ß√£o RF-D√≥lar", -1.0, 1.0, 
                                      selected_template["rf_dolar"], 0.05)
        
        # Construir matriz de correla√ß√£o
        corr_matrix = np.array([
            [1.0, corr_acoes_rf, corr_acoes_dolar],
            [corr_acoes_rf, 1.0, corr_rf_dolar],
            [corr_acoes_dolar, corr_rf_dolar, 1.0]
        ])
        
        # Verificar se a matriz √© positiva definida
        eigenvalues = np.linalg.eigvals(corr_matrix)
        min_eigenvalue = np.min(eigenvalues)
        
        if min_eigenvalue <= 0:
            st.error(f"‚ö†Ô∏è Matriz n√£o √© positiva definida! (menor autovalor: {min_eigenvalue:.4f})")
            st.info("üí° Ajuste as correla√ß√µes para garantir consist√™ncia matem√°tica")
            # Ajustar para a matriz mais pr√≥xima positiva definida
            from scipy.linalg import sqrtm
            corr_matrix = (corr_matrix + corr_matrix.T) / 2
            eigenvalues, eigenvectors = np.linalg.eig(corr_matrix)
            eigenvalues[eigenvalues < 0.001] = 0.001
            corr_matrix = eigenvectors @ np.diag(eigenvalues) @ eigenvectors.T
            corr_matrix = corr_matrix / np.sqrt(np.diag(corr_matrix)[:, None] * np.diag(corr_matrix)[None, :])
            st.success("‚úÖ Matriz ajustada automaticamente")
        else:
            st.success(f"‚úÖ Matriz v√°lida (menor autovalor: {min_eigenvalue:.4f})")
        
        # Visualizar matriz
        fig_corr, ax = plt.subplots(figsize=(6, 5))
        sns.heatmap(corr_matrix, annot=True, fmt='.2f', cmap='RdBu_r', center=0,
                   xticklabels=['A√ß√µes', 'RF', 'D√≥lar'],
                   yticklabels=['A√ß√µes', 'RF', 'D√≥lar'],
                   vmin=-1, vmax=1, square=True, cbar_kws={"shrink": 0.8})
        ax.set_title('Matriz de Correla√ß√£o')
        st.pyplot(fig_corr)
        
    else:
        # Matriz identidade (sem correla√ß√£o)
        corr_matrix = np.eye(3)
        st.info("üìä Usando ativos independentes (correla√ß√£o = 0)")

with tab3:
    st.write("### Distribui√ß√µes dos Retornos")
    
    # Escolher distribui√ß√£o para cada ativo
    col1, col2, col3 = st.columns(3)
    with col1:
        dist_acoes = st.selectbox("Distribui√ß√£o A√ß√µes", 
                                  ["Normal", "t-Student", "Lognormal", "Mixture"], 
                                  index=0)
        if dist_acoes == "t-Student":
            df_acoes = st.slider("Graus de liberdade", 3, 30, 5)
        elif dist_acoes == "Mixture":
            mix_prob = st.slider("Prob. cauda pesada (%)", 0, 50, 10) / 100
            mix_scale = st.slider("Escala da cauda", 1.5, 5.0, 2.5)
    
    with col2:
        dist_juros = st.selectbox("Distribui√ß√£o RF", 
                                  ["Normal", "t-Student", "Lognormal"], 
                                  index=0)
        if dist_juros == "t-Student":
            df_juros = st.slider("Graus de liberdade RF", 3, 30, 10)
    
    with col3:
        dist_dolar = st.selectbox("Distribui√ß√£o D√≥lar", 
                                  ["Normal", "t-Student", "Lognormal"], 
                                  index=0)
        if dist_dolar == "t-Student":
            df_dolar = st.slider("Graus de liberdade D√≥lar", 3, 30, 7)
    
    # Informa√ß√µes sobre as distribui√ß√µes
    with st.expander("‚ÑπÔ∏è Sobre as distribui√ß√µes"):
        st.write("""
        - **Normal**: Distribui√ß√£o padr√£o, sim√©trica
        - **t-Student**: Caudas mais pesadas (eventos extremos mais frequentes)
        - **Lognormal**: Assim√©trica positiva (crashes mais severos que rallies)
        - **Mixture**: Mistura de normal com distribui√ß√£o de cauda pesada
        """)

with tab4:
    st.write("### Cen√°rios de Stress Customizados")
    
    usar_cenarios = st.checkbox("Incluir cen√°rios de stress determin√≠sticos", value=False)
    
    if usar_cenarios:
        # Inicializar cen√°rios no session_state
        if 'cenarios' not in st.session_state:
            st.session_state.cenarios = pd.DataFrame({
                'Nome': ['Crise 2008', 'COVID-19', 'Taper Tantrum', 'Brexit'],
                'A√ß√µes (%)': [-38.5, -33.9, -5.8, -8.5],
                'RF (%)': [8.0, -2.0, 12.0, 3.5],
                'D√≥lar (%)': [25.0, 18.0, 15.0, 12.0],
                'Probabilidade (%)': [2.0, 2.0, 5.0, 3.0]
            })
        
        # Editor de cen√°rios
        st.write("#### Editar Cen√°rios")
        edited_df = st.data_editor(
            st.session_state.cenarios,
            num_rows="dynamic",
            use_container_width=True,
            column_config={
                "Nome": st.column_config.TextColumn("Cen√°rio", required=True, width="medium"),
                "A√ß√µes (%)": st.column_config.NumberColumn("A√ß√µes (%)", format="%.1f", required=True),
                "RF (%)": st.column_config.NumberColumn("RF (%)", format="%.1f", required=True),
                "D√≥lar (%)": st.column_config.NumberColumn("D√≥lar (%)", format="%.1f", required=True),
                "Probabilidade (%)": st.column_config.NumberColumn("Prob (%)", min_value=0.0, max_value=100.0, format="%.1f")
            }
        )
        st.session_state.cenarios = edited_df
        
        # Percentual de cen√°rios stress
        if len(st.session_state.cenarios) > 0:
            pct_stress = st.slider("% do total como cen√°rios de stress", 0, 50, 10)
            total_prob = st.session_state.cenarios['Probabilidade (%)'].sum()
            if total_prob > 0:
                st.info(f"üìä Probabilidade total dos cen√°rios: {total_prob:.1f}%")

# SIMULA√á√ÉO
st.write("---")
st.subheader("üé≤ Executar Simula√ß√£o")

col1, col2 = st.columns([3, 1])
with col1:
    run_simulation = st.button("üöÄ Rodar Simula√ß√£o VaR", type="primary", use_container_width=True)
with col2:
    generate_report = st.checkbox("üìÑ Gerar PDF", value=True)

if run_simulation:
    with st.spinner("Processando simula√ß√£o Monte Carlo..."):
        np.random.seed(seed)
        
        # Preparar par√¢metros
        vols_d = vols * np.sqrt(horizonte_dias/252)
        
        # Lista para armazenar retornos e labels
        all_returns = []
        all_labels = []
        
        # PARTE 1: SIMULA√á√ÉO MONTE CARLO
        if usar_cenarios and len(st.session_state.cenarios) > 0:
            n_stress_total = int(n_sims * pct_stress / 100)
            n_mc = n_sims - n_stress_total
        else:
            n_mc = n_sims
            n_stress_total = 0
        
        # Gerar retornos Monte Carlo com correla√ß√£o e distribui√ß√µes escolhidas
        if n_mc > 0:
            # Gerar vari√°veis aleat√≥rias correlacionadas
            if usar_correlacao:
                L = np.linalg.cholesky(corr_matrix)
                Z = np.random.normal(size=(n_mc, 3))
                Z_corr = Z @ L.T
            else:
                Z_corr = np.random.normal(size=(n_mc, 3))
            
            R_mc = np.zeros((n_mc, 3))
            
            # Aplicar distribui√ß√£o para cada ativo
            for j, (dist, vol) in enumerate(zip([dist_acoes, dist_juros, dist_dolar], vols_d)):
                if dist == "Normal":
                    R_mc[:, j] = vol * Z_corr[:, j]
                
                elif dist == "t-Student":
                    df = [df_acoes, df_juros, df_dolar][j] if 'df_acoes' in locals() else 5
                    # Converter normal para t-student mantendo correla√ß√£o
                    t_samples = stats.t.ppf(stats.norm.cdf(Z_corr[:, j]), df)
                    # Ajustar escala para manter volatilidade desejada
                    scale_factor = np.sqrt(df / (df - 2)) if df > 2 else 1
                    R_mc[:, j] = vol * t_samples / scale_factor
                
                elif dist == "Lognormal":
                    # Parametriza√ß√£o lognormal
                    mu_log = -0.5 * vol**2
                    R_mc[:, j] = np.exp(mu_log + vol * Z_corr[:, j]) - 1
                
                elif dist == "Mixture":
                    # Mixture: normal + cauda pesada
                    is_tail = np.random.rand(n_mc) < mix_prob
                    normal_part = vol * Z_corr[:, j]
                    tail_part = vol * mix_scale * np.random.standard_t(3, size=n_mc)
                    R_mc[:, j] = np.where(is_tail, tail_part, normal_part)
            
            all_returns.append(R_mc)
            all_labels.extend(['Monte Carlo'] * n_mc)
        
        # PARTE 2: CEN√ÅRIOS DE STRESS
        if usar_cenarios and n_stress_total > 0:
            cenarios_df = st.session_state.cenarios
            probs = cenarios_df['Probabilidade (%)'].values
            probs = probs / probs.sum() if probs.sum() > 0 else np.ones(len(probs)) / len(probs)
            
            # Amostrar cen√°rios baseado nas probabilidades
            indices = np.random.choice(len(cenarios_df), size=n_stress_total, p=probs)
            
            R_stress = []
            for idx in indices:
                row = cenarios_df.iloc[idx]
                R_stress.append([
                    row['A√ß√µes (%)'] / 100,
                    row['RF (%)'] / 100,
                    row['D√≥lar (%)'] / 100
                ])
                all_labels.append(row['Nome'])
            
            R_stress = np.array(R_stress)
            all_returns.append(R_stress)
        
        # Combinar todos os retornos
        R_total = np.vstack(all_returns) if len(all_returns) > 0 else np.zeros((n_sims, 3))
        
        # Calcular P&L
        port_ret = R_total @ pesos
        pnl = pl * port_ret
        
        # M√âTRICAS DE RISCO
        var = -np.quantile(pnl, 1-alpha)
        es = -pnl[pnl <= -var].mean() if len(pnl[pnl <= -var]) > 0 else 0
        
        # M√©tricas adicionais
        sharpe = (pnl.mean() / pnl.std()) * np.sqrt(252/horizonte_dias) if pnl.std() > 0 else 0
        sortino_denominator = np.sqrt(np.mean(np.minimum(pnl, 0)**2))
        sortino = (pnl.mean() / sortino_denominator) * np.sqrt(252/horizonte_dias) if sortino_denominator > 0 else 0
        max_loss = pnl.min()
        prob_loss = (pnl < 0).mean() * 100
        
    # EXIBIR RESULTADOS
    st.success("‚úÖ Simula√ß√£o conclu√≠da!")
    
    # M√©tricas principais
    st.subheader("üìä M√©tricas de Risco")
    col1, col2, col3, col4, col5 = st.columns(5)
    col1.metric("VaR " + nivel_conf, f"R$ {var:,.0f}", f"{var/pl*100:.2f}% PL")
    col2.metric("CVaR/ES", f"R$ {es:,.0f}", f"{es/pl*100:.2f}% PL")
    col3.metric("Prob. Perda", f"{prob_loss:.1f}%")
    col4.metric("Sharpe Ratio", f"{sharpe:.2f}")
    col5.metric("Pior Cen√°rio", f"R$ {max_loss:,.0f}", f"{max_loss/pl*100:.2f}% PL")
    
    # VISUALIZA√á√ïES
    figures = []  # Lista para armazenar figuras para o PDF
    
    # Figura 1: Dashboard principal
    fig1 = plt.figure(figsize=(16, 10))
    
    # 1.1 Histograma com separa√ß√£o MC vs Stress
    ax1 = plt.subplot(2, 3, 1)
    if n_stress_total > 0:
        ax1.hist(pnl[:n_mc], bins=60, alpha=0.6, label=f'Monte Carlo ({n_mc:,})', 
                color='blue', density=True, edgecolor='none')
        ax1.hist(pnl[n_mc:], bins=30, alpha=0.7, label=f'Stress ({n_stress_total:,})', 
                color='red', density=True, edgecolor='none')
    else:
        ax1.hist(pnl, bins=60, alpha=0.7, color='blue', edgecolor='black', linewidth=0.5)
    
    ax1.axvline(-var, color='red', linestyle='--', linewidth=2, label=f'VaR {nivel_conf}')
    ax1.axvline(-es, color='orange', linestyle='--', linewidth=2, label='CVaR')
    ax1.axvline(0, color='black', linestyle='-', linewidth=0.5, alpha=0.5)
    ax1.set_xlabel('P&L (R$)')
    ax1.set_ylabel('Densidade')
    ax1.set_title('Distribui√ß√£o de P&L')
    ax1.legend(loc='best')
    ax1.grid(True, alpha=0.3)
    
    # 1.2 Q-Q Plot
    ax2 = plt.subplot(2, 3, 2)
    stats.probplot(port_ret * 100, dist="norm", plot=ax2)
    ax2.set_title('Q-Q Plot (Normalidade)')
    ax2.set_ylabel('Retornos Observados (%)')
    ax2.grid(True, alpha=0.3)
    
    # 1.3 CDF
    ax3 = plt.subplot(2, 3, 3)
    sorted_pnl = np.sort(pnl)
    cdf = np.arange(1, len(sorted_pnl)+1) / len(sorted_pnl)
    ax3.plot(sorted_pnl/1000, cdf*100, linewidth=2, color='darkblue')
    ax3.axvline(-var/1000, color='red', linestyle='--', label=f'VaR {nivel_conf}')
    ax3.axvline(-es/1000, color='orange', linestyle='--', label='CVaR')
    ax3.axhline((1-alpha)*100, color='red', linestyle=':', alpha=0.5)
    ax3.fill_betweenx([0, (1-alpha)*100], sorted_pnl.min()/1000, -var/1000, 
                      alpha=0.2, color='red', label='Regi√£o VaR')
    ax3.set_xlabel('P&L (R$ mil)')
    ax3.set_ylabel('Probabilidade Acumulada (%)')
    ax3.set_title('Fun√ß√£o de Distribui√ß√£o Acumulada')
    ax3.legend(loc='best')
    ax3.grid(True, alpha=0.3)
    
    # 1.4 Scatter plot retornos dos ativos
    ax4 = plt.subplot(2, 3, 4)
    scatter = ax4.scatter(R_total[:, 0]*100, R_total[:, 2]*100, 
                         c=port_ret*100, cmap='RdYlGn', alpha=0.5, s=1)
    plt.colorbar(scatter, ax=ax4, label='Retorno Portfolio (%)')
    ax4.set_xlabel('Retorno A√ß√µes (%)')
    ax4.set_ylabel('Retorno D√≥lar (%)')
    ax4.set_title('Mapa de Retornos')
    ax4.grid(True, alpha=0.3)
    
    # 1.5 Decomposi√ß√£o do risco
    ax5 = plt.subplot(2, 3, 5)
    contrib_acoes = (R_total[:, 0] * pesos[0] * pl).std()
    contrib_juros = (R_total[:, 1] * pesos[1] * pl).std()
    contrib_dolar = (R_total[:, 2] * pesos[2] * pl).std()
    
    contributions = [contrib_acoes, contrib_juros, contrib_dolar]
    colors_contrib = ['#2E86AB', '#A23B72', '#F18F01']
    bars = ax5.bar(['A√ß√µes', 'RF', 'D√≥lar'], contributions, color=colors_contrib, alpha=0.7)
    ax5.set_ylabel('Contribui√ß√£o para Volatilidade (R$)')
    ax5.set_title('Decomposi√ß√£o do Risco')
    ax5.grid(True, alpha=0.3, axis='y')
    
    # Adicionar valores nas barras
    for bar, val in zip(bars, contributions):
        height = bar.get_height()
        ax5.text(bar.get_x() + bar.get_width()/2., height,
                f'R$ {val:,.0f}', ha='center', va='bottom')
    
    # 1.6 An√°lise temporal (rolling VaR)
    ax6 = plt.subplot(2, 3, 6)
    window = max(100, len(pnl) // 100)
    rolling_var = pd.Series(pnl).rolling(window=window).quantile(1-alpha).values * -1
    ax6.plot(rolling_var/1000, alpha=0.7, linewidth=1, color='darkred')
    ax6.axhline(var/1000, color='red', linestyle='--', label=f'VaR Total', alpha=0.7)
    ax6.fill_between(range(len(rolling_var)), 0, rolling_var/1000, alpha=0.2, color='red')
    ax6.set_xlabel('Simula√ß√£o #')
    ax6.set_ylabel('VaR (R$ mil)')
    ax6.set_title(f'VaR M√≥vel (janela={window})')
    ax6.legend()
    ax6.grid(True, alpha=0.3)
    
    plt.suptitle(f'Dashboard VaR - PL: R$ {pl:,.0f} | Horizonte: {horizonte_dias} dias', 
                fontsize=14, fontweight='bold')
    plt.tight_layout()
    figures.append(fig1)
    st.pyplot(fig1)
    
    # Figura 2: An√°lise de Cen√°rios (se aplic√°vel)
    if usar_cenarios and n_stress_total > 0:
        fig2 = plt.figure(figsize=(14, 8))
        
        # 2.1 Impacto por cen√°rio
        ax1 = plt.subplot(2, 2, 1)
        cenarios_unicos = st.session_state.cenarios['Nome'].values
        impactos = []
        counts = []
        
        for cenario in cenarios_unicos:
            mask = np.array(all_labels[n_mc:]) == cenario
            if mask.sum() > 0:
                impacto = pnl[n_mc:][mask].mean()
                impactos.append(impacto)
                counts.append(mask.sum())
            else:
                impactos.append(0)
                counts.append(0)
        
        colors = ['red' if x < 0 else 'green' for x in impactos]
        bars = ax1.barh(cenarios_unicos, np.array(impactos)/1000, color=colors, alpha=0.7)
        ax1.set_xlabel('Impacto M√©dio (R$ mil)')
        ax1.set_title('Impacto por Cen√°rio de Stress')
        ax1.axvline(0, color='black', linewidth=0.5)
        ax1.grid(True, alpha=0.3, axis='x')
        
        # Adicionar contagem
        for i, (bar, count) in enumerate(zip(bars, counts)):
            width = bar.get_width()
            ax1.text(width, bar.get_y() + bar.get_height()/2, 
                    f' n={count}', ha='left' if width >= 0 else 'right', va='center', fontsize=8)
        
        # 2.2 Compara√ß√£o de distribui√ß√µes
        ax2 = plt.subplot(2, 2, 2)
        box_data = []
        labels_box = []
        
        if n_mc > 0:
            box_data.append(pnl[:n_mc]/1000)
            labels_box.append('Monte Carlo')
        
        for cenario in cenarios_unicos:
            mask = np.array(all_labels) == cenario
            if mask.sum() > 5:  # S√≥ mostrar se tiver mais de 5 observa√ß√µes
                box_data.append(pnl[mask]/1000)
                labels_box.append(cenario[:10])  # Truncar nome se muito longo
        
        bp = ax2.boxplot(box_data, labels=labels_box, showmeans=True, patch_artist=True)
        
        # Colorir boxes
        for patch, label in zip(bp['boxes'], labels_box):
            if label == 'Monte Carlo':
                patch.set_facecolor('lightblue')
            else:
                patch.set_facecolor('lightcoral')
        
        ax2.set_ylabel('P&L (R$ mil)')
        ax2.set_title('Compara√ß√£o de Cen√°rios')
        ax2.grid(True, alpha=0.3, axis='y')
        plt.setp(ax2.xaxis.get_majorticklabels(), rotation=45, ha='right')
        
        # 2.3 Matriz de cen√°rios
        ax3 = plt.subplot(2, 2, 3)
        scenario_matrix = st.session_state.cenarios[['A√ß√µes (%)', 'RF (%)', 'D√≥lar (%)']].values
        im = ax3.imshow(scenario_matrix.T, cmap='RdYlGn', aspect='auto', vmin=-50, vmax=50)
        ax3.set_yticks(range(3))
        ax3.set_yticklabels(['A√ß√µes', 'RF', 'D√≥lar'])
        ax3.set_xticks(range(len(cenarios_unicos)))
        ax3.set_xticklabels(cenarios_unicos, rotation=45, ha='right')
        ax3.set_title('Matriz de Cen√°rios (%)')
        plt.colorbar(im, ax=ax3)
        
        # Adicionar valores
        for i in range(3):
            for j in range(len(cenarios_unicos)):
                text = ax3.text(j, i, f'{scenario_matrix[j, i]:.0f}',
                              ha="center", va="center", color="white" if abs(scenario_matrix[j, i]) > 25 else "black",
                              fontsize=8)
        
        # 2.4 An√°lise de cauda
        ax4 = plt.subplot(2, 2, 4)
        tail_threshold = np.percentile(pnl, 5)
        tail_data = pnl[pnl <= tail_threshold]
        
        # Separar cauda por tipo
        tail_mc = []
        tail_stress = []
        for i, (val, label) in enumerate(zip(pnl, all_labels)):
            if val <= tail_threshold:
                if label == 'Monte Carlo':
                    tail_mc.append(val)
                else:
                    tail_stress.append(val)
        
        if len(tail_mc) > 0:
            ax4.hist(np.array(tail_mc)/1000, bins=20, alpha=0.6, label=f'MC ({len(tail_mc)})', color='blue')
        if len(tail_stress) > 0:
            ax4.hist(np.array(tail_stress)/1000, bins=15, alpha=0.6, label=f'Stress ({len(tail_stress)})', color='red')
        
        ax4.axvline(-var/1000, color='red', linestyle='--', label='VaR')
        ax4.set_xlabel('P&L (R$ mil)')
        ax4.set_ylabel('Frequ√™ncia')
        ax4.set_title('An√°lise de Cauda (5% piores)')
        ax4.legend()
        ax4.grid(True, alpha=0.3)
        
        plt.suptitle('An√°lise Detalhada de Cen√°rios de Stress', fontsize=14, fontweight='bold')
        plt.tight_layout()
        figures.append(fig2)
        st.pyplot(fig2)
    
    # TABELAS DE ESTAT√çSTICAS
    with st.expander("üìà Estat√≠sticas Detalhadas", expanded=True):
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("#### Estat√≠sticas Gerais")
            stats_df = pd.DataFrame({
                'M√©trica': [
                    'Retorno Esperado', 'Volatilidade', 'VaR ' + nivel_conf, 'CVaR/ES',
                    'Assimetria', 'Curtose', 'Sharpe Ratio', 'Sortino Ratio',
                    'M√°xima Perda', 'M√°ximo Ganho'
                ],
                'Valor': [
                    f"R$ {pnl.mean():,.0f} ({pnl.mean()/pl*100:.3f}%)",
                    f"R$ {pnl.std():,.0f} ({pnl.std()/pl*100:.2f}%)",
                    f"R$ {var:,.0f} ({var/pl*100:.2f}%)",
                    f"R$ {es:,.0f} ({es/pl*100:.2f}%)",
                    f"{stats.skew(port_ret):.3f}",
                    f"{stats.kurtosis(port_ret):.3f}",
                    f"{sharpe:.3f}",
                    f"{sortino:.3f}",
                    f"R$ {max_loss:,.0f} ({max_loss/pl*100:.2f}%)",
                    f"R$ {pnl.max():,.0f} ({pnl.max()/pl*100:.2f}%)"
                ]
            })
            st.dataframe(stats_df, use_container_width=True, hide_index=True)
        
        with col2:
            st.write("#### Percentis da Distribui√ß√£o")
            percentiles = [0.5, 1, 5, 10, 25, 50, 75, 90, 95, 99, 99.5]
            percentile_values = [np.percentile(pnl, p) for p in percentiles]
            
            percentile_df = pd.DataFrame({
                'Percentil': [f"{p}%" for p in percentiles],
                'P&L (R$)': [f"{val:,.0f}" for val in percentile_values],
                'Retorno (%)': [f"{val/pl*100:.2f}%" for val in percentile_values]
            })
            st.dataframe(percentile_df, use_container_width=True, hide_index=True)
    
    # Testes Estat√≠sticos
    with st.expander("üî¨ Testes Estat√≠sticos"):
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.write("#### Teste de Normalidade")
            shapiro_stat, shapiro_p = stats.shapiro(port_ret[:min(5000, len(port_ret))])
            jarque_stat, jarque_p = stats.jarque_bera(port_ret)
            
            test_df = pd.DataFrame({
                'Teste': ['Shapiro-Wilk', 'Jarque-Bera'],
                'Estat√≠stica': [f"{shapiro_stat:.4f}", f"{jarque_stat:.4f}"],
                'p-valor': [f"{shapiro_p:.4f}", f"{jarque_p:.4f}"],
                'Resultado': [
                    "‚úÖ Normal" if shapiro_p > 0.05 else "‚ùå N√£o-Normal",
                    "‚úÖ Normal" if jarque_p > 0.05 else "‚ùå N√£o-Normal"
                ]
            })
            st.dataframe(test_df, use_container_width=True, hide_index=True)
        
        with col2:
            st.write("#### Backtesting VaR")
            violations = (pnl <= -var).sum()
            expected_violations = n_sims * (1 - alpha)
            violation_rate = violations / n_sims
            
            # Teste de Kupiec (propor√ß√£o de viola√ß√µes)
            if violations > 0:
                lr_stat = -2 * (violations * np.log(1-alpha) + (n_sims-violations) * np.log(alpha) -
                               violations * np.log(violation_rate) - (n_sims-violations) * np.log(1-violation_rate))
                kupiec_p = 1 - stats.chi2.cdf(lr_stat, 1)
            else:
                kupiec_p = 0
            
            backtest_df = pd.DataFrame({
                'M√©trica': ['Viola√ß√µes Observadas', 'Viola√ß√µes Esperadas', 'Taxa de Viola√ß√£o', 'Teste Kupiec p-valor'],
                'Valor': [
                    f"{violations} ({violation_rate*100:.2f}%)",
                    f"{expected_violations:.1f} ({(1-alpha)*100:.2f}%)",
                    "‚úÖ Adequado" if abs(violation_rate - (1-alpha)) < 0.01 else "‚ö†Ô∏è Revisar",
                    f"{kupiec_p:.4f} " + ("‚úÖ" if kupiec_p > 0.05 else "‚ùå")
                ]
            })
            st.dataframe(backtest_df, use_container_width=True, hide_index=True)
        
        with col3:
            st.write("#### Qualidade da Matriz de Correla√ß√£o")
            if usar_correlacao:
                eigenvalues = np.linalg.eigvals(corr_matrix)
                condition_number = np.max(eigenvalues) / np.min(eigenvalues)
                
                corr_quality_df = pd.DataFrame({
                    'M√©trica': ['Menor Autovalor', 'Maior Autovalor', 'N√∫mero de Condi√ß√£o', 'Status'],
                    'Valor': [
                        f"{np.min(eigenvalues):.4f}",
                        f"{np.max(eigenvalues):.4f}",
                        f"{condition_number:.2f}",
                        "‚úÖ Est√°vel" if condition_number < 10 else "‚ö†Ô∏è Mal-condicionada" if condition_number < 100 else "‚ùå Inst√°vel"
                    ]
                })
                st.dataframe(corr_quality_df, use_container_width=True, hide_index=True)
    
    # EXPORTAR RESULTADOS
    st.write("---")
    st.subheader("üíæ Exportar Resultados")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        # CSV com simula√ß√µes
        results_df = pd.DataFrame({
            'Simula√ß√£o': range(1, len(pnl)+1),
            'Tipo': all_labels,
            'P&L (R$)': pnl,
            'Retorno Portfolio (%)': port_ret * 100,
            'Retorno A√ß√µes (%)': R_total[:, 0] * 100,
            'Retorno RF (%)': R_total[:, 1] * 100,
            'Retorno D√≥lar (%)': R_total[:, 2] * 100
        })
        
        csv = results_df.to_csv(index=False)
        st.download_button(
            label="üì• Baixar Dados (CSV)",
            data=csv,
            file_name=f'var_simulation_{datetime.datetime.now():%Y%m%d_%H%M%S}.csv',
            mime='text/csv'
        )
    
    with col2:
        # JSON com par√¢metros
        params = {
            'data': datetime.datetime.now().isoformat(),
            'patrimonio': pl,
            'horizonte_dias': horizonte_dias,
            'nivel_confianca': nivel_conf,
            'num_simulacoes': n_sims,
            'alocacao': {'acoes': acoes, 'rf': juros, 'dolar': dolar},
            'volatilidades': {'acoes': vol_acoes, 'rf': vol_juros, 'dolar': vol_dolar},
            'correlacoes': corr_matrix.tolist() if usar_correlacao else None,
            'distribuicoes': {'acoes': dist_acoes, 'rf': dist_juros, 'dolar': dist_dolar},
            'resultados': {
                'var': var,
                'cvar': es,
                'sharpe': sharpe,
                'sortino': sortino,
                'prob_perda': prob_loss,
                'max_perda': max_loss
            }
        }
        
        json_str = json.dumps(params, indent=2, default=str)
        st.download_button(
            label="üì• Baixar Par√¢metros (JSON)",
            data=json_str,
            file_name=f'var_params_{datetime.datetime.now():%Y%m%d_%H%M%S}.json',
            mime='application/json'
        )
    
    with col3:
        # PDF com relat√≥rio completo
        if generate_report:
            pdf_buffer = BytesIO()
            
            with PdfPages(pdf_buffer) as pdf:
                # Adicionar cada figura ao PDF
                for fig in figures:
                    pdf.savefig(fig, bbox_inches='tight')
                
                # Criar p√°gina de texto com resumo
                fig_text = plt.figure(figsize=(8.5, 11))
                fig_text.text(0.5, 0.95, 'RELAT√ìRIO DE VALUE AT RISK', 
                            fontsize=16, fontweight='bold', ha='center')
                
                report_text = f"""
                Data: {datetime.datetime.now():%d/%m/%Y %H:%M}
                
                PAR√ÇMETROS DA SIMULA√á√ÉO
                ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
                Patrim√¥nio L√≠quido: R$ {pl:,.0f}
                Horizonte: {horizonte_dias} dias √∫teis
                N√≠vel de Confian√ßa: {nivel_conf}
                Simula√ß√µes: {n_sims:,} ({n_mc:,} MC + {n_stress_total:,} Stress)
                
                ALOCA√á√ÉO DA CARTEIRA
                ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
                A√ß√µes: {acoes}%
                Renda Fixa: {juros}%
                D√≥lar: {dolar}%
                Caixa: {100-total_aloc}%
                
                PAR√ÇMETROS DE RISCO
                ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
                Volatilidades (a.a.):
                  ‚Ä¢ A√ß√µes: {vol_acoes:.1f}%
                  ‚Ä¢ Renda Fixa: {vol_juros:.1f}%
                  ‚Ä¢ D√≥lar: {vol_dolar:.1f}%
                
                Correla√ß√µes:
                  ‚Ä¢ A√ß√µes-RF: {corr_matrix[0,1]:.2f}
                  ‚Ä¢ A√ß√µes-D√≥lar: {corr_matrix[0,2]:.2f}
                  ‚Ä¢ RF-D√≥lar: {corr_matrix[1,2]:.2f}
                
                RESULTADOS PRINCIPAIS
                ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
                VaR {nivel_conf}: R$ {var:,.0f} ({var/pl*100:.2f}% do PL)
                CVaR/ES: R$ {es:,.0f} ({es/pl*100:.2f}% do PL)
                Probabilidade de Perda: {prob_loss:.1f}%
                Sharpe Ratio: {sharpe:.3f}
                Sortino Ratio: {sortino:.3f}
                M√°xima Perda: R$ {max_loss:,.0f}
                
                AN√ÅLISE DE CAUDA
                ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
                Assimetria: {stats.skew(port_ret):.3f}
                Curtose: {stats.kurtosis(port_ret):.3f}
                Percentil 1%: R$ {np.percentile(pnl, 1):,.0f}
                Percentil 0.5%: R$ {np.percentile(pnl, 0.5):,.0f}
                """
                
                fig_text.text(0.1, 0.85, report_text, fontsize=10, 
                            verticalalignment='top', fontfamily='monospace')
                fig_text.axis('off')
                pdf.savefig(fig_text, bbox_inches='tight')
                
                # Metadados do PDF
                d = pdf.infodict()
                d['Title'] = 'Relat√≥rio VaR Monte Carlo'
                d['Author'] = 'Finhealth Risk Analytics'
                d['Subject'] = 'An√°lise de Value at Risk'
                d['Keywords'] = f'VaR, Monte Carlo, {nivel_conf}'
                d['CreationDate'] = datetime.datetime.now()
            
            pdf_buffer.seek(0)
            
            st.download_button(
                label="üì• Baixar Relat√≥rio (PDF)",
                data=pdf_buffer,
                file_name=f'var_report_{datetime.datetime.now():%Y%m%d_%H%M%S}.pdf',
                mime='application/pdf'
            )

# Rodap√© com informa√ß√µes
st.write("---")
st.caption("""
üí° **Dicas:**
- Use correla√ß√µes negativas entre a√ß√µes e renda fixa para diversifica√ß√£o
- Distribui√ß√µes t-Student capturam melhor eventos extremos
- Cen√°rios de stress complementam a an√°lise probabil√≠stica
- CVaR/ES fornece informa√ß√£o sobre perdas al√©m do VaR
""")

# Informa√ß√µes t√©cnicas
with st.sidebar:
    st.header("‚ÑπÔ∏è Informa√ß√µes")
    st.write("""
    ### Sobre o Modelo
    
    **VaR (Value at Risk)**: Perda m√°xima esperada com determinado n√≠vel de confian√ßa.
    
    **CVaR/ES**: Perda m√©dia quando o VaR √© excedido.
    
    **Distribui√ß√µes**:
    - Normal: Modelo padr√£o
    - t-Student: Caudas pesadas
    - Lognormal: Assimetria
    - Mixture: Eventos extremos
    
    **Correla√ß√µes**: Captura depend√™ncias entre ativos.
    
    **Cen√°rios de Stress**: Eventos determin√≠sticos baseados em crises hist√≥ricas.
    """)
    
    st.write("---")
    st.write("üè¢ **Finhealth Risk Analytics**")
    st.write("üìÖ " + datetime.datetime.now().strftime("%d/%m/%Y"))